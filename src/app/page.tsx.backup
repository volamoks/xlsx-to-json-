'use client';
import React, { useState } from 'react';
import FileUpload from './components/FileUpload';
import JsonOutput from './components/JsonOutput';
import { KeycloakUserImport, processData } from './lib/dataConverter.client';
import emailConfig from '@/lib/email-config.json';

const Home: React.FC = () => {
    const [keycloakJson, setKeycloakJson] = useState<{
        realm: string;
        users: KeycloakUserImport[];
    } | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [logOutput, setLogOutput] = useState<string>('');
    const [isExporting, setIsExporting] = useState<boolean>(false); // For Keycloak to Sheet
    const [isImporting, setIsImporting] = useState<boolean>(false); // For Sheet to Keycloak
    const [isExportingToGoogleSheet, setIsExportingToGoogleSheet] = useState<boolean>(false); // For DB to Google Sheet
    const [isCheckingSheet, setIsCheckingSheet] = useState<boolean>(false);
    const [isGeneratingExcel, setIsGeneratingExcel] = useState<boolean>(false);
    const [excelFolderId, setExcelFolderId] = useState<string>('');
    const [isTriggeringFlow, setIsTriggeringFlow] = useState<boolean>(false);
    const [isSendingEmail, setIsSendingEmail] = useState<boolean>(false);
    const [selectedScenarioId, setSelectedScenarioId] = useState<string>(emailConfig[0]?.id || '');
    const [isSendingCategoryNotification, setIsSendingCategoryNotification] = useState<boolean>(false);
    const [isSendingKamNotification, setIsSendingKamNotification] = useState<boolean>(false);
    const [isSendingListingNotification, setIsSendingListingNotification] = useState<boolean>(false);
    const [selectedCategoryId, setSelectedCategoryId] = useState<string>('2');

    const handleFileLoaded = async (data: ArrayBuffer) => {
        // Ensure processData is called with the correct sourceType for client-side file processing
        const result = await processData(data, 'file');
        if ('error' in result) {
            setError(result.error || 'An unknown error occurred during file processing.');
            setKeycloakJson(null);
        } else {
            setError(null);
            setKeycloakJson(result as { realm: string; users: KeycloakUserImport[] });
        }
    };

    const handleStreamedOperation = async (
        apiEndpoint: string,
        operationType: 'Export' | 'Import' | 'ExportToGoogleSheet',
    ) => {
        if (operationType === 'Export') setIsExporting(true);
        if (operationType === 'Import') setIsImporting(true);
        if (operationType === 'ExportToGoogleSheet') setIsExportingToGoogleSheet(true);
        setLogOutput(
            `Starting ${operationType
                .toLowerCase()
                .replace('togooglesheet', ' to Google Sheet')}...\n`,
        );

        try {
            const response = await fetch(apiEndpoint, { method: 'POST' });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            if (!response.body) {
                throw new Error('Response body is null');
            }
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let done = false;
            while (!done) {
                const { value, done: readerDone } = await reader.read();
                done = readerDone;
                if (value) {
                    setLogOutput(prev => prev + decoder.decode(value, { stream: true }));
                }
            }
            setLogOutput(prev => prev + `\n${operationType} process finished.\n`);
        } catch (e: unknown) {
            const message =
                e instanceof Error
                    ? e.message
                    : `An unknown error occurred during ${operationType.toLowerCase()}.`;
            setLogOutput(prev => prev + `\n${operationType.toUpperCase()}_ERROR: ${message}\n`);
        } finally {
            if (operationType === 'Export') setIsExporting(false);
            if (operationType === 'Import') setIsImporting(false);
            if (operationType === 'ExportToGoogleSheet') setIsExportingToGoogleSheet(false);
        }
    };

    const handleCheckSheet = async () => {
        setIsCheckingSheet(true);
        setLogOutput(prev => prev + '\nStarting to check sheet for triggers...\n');
        try {
            const response = await fetch('/api/check-sheet', { method: 'POST' });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || `HTTP error! status: ${response.status}`);
            }
            setLogOutput(prev => prev + `SUCCESS: ${result.message}\n`);
        } catch (e: unknown) {
            const message = e instanceof Error ? e.message : 'An unknown error occurred.';
            setLogOutput(prev => prev + `ERROR: ${message}\n`);
        } finally {
            setIsCheckingSheet(false);
        }
    };

    const handleGenerateExcel = async () => {
        if (!excelFolderId || isNaN(parseInt(excelFolderId, 10))) {
            setLogOutput(prev => prev + '\nPlease enter a valid Folder ID for Excel generation.\n');
            return;
        }
        setIsGeneratingExcel(true);
        setLogOutput(
            prev => prev + `\nGenerating download link for Folder ID: ${excelFolderId}...\n`,
        );
        try {
            const response = await fetch('/api/generate-excel', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ folderId: parseInt(excelFolderId, 10) }),
            });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || `HTTP error! status: ${response.status}`);
            }
            setLogOutput(prev => prev + `SUCCESS: ${result.message}\n`);
        } catch (e: unknown) {
            const message = e instanceof Error ? e.message : 'An unknown error occurred.';
            setLogOutput(prev => prev + `ERROR: ${message}\n`);
        } finally {
            setIsGeneratingExcel(false);
        }
    };

    const handleTriggerFlow = async () => {
        setIsTriggeringFlow(true);
        setLogOutput(prev => prev + '\nTriggering Power Automate flow with Excel file...\n');
        try {
            const response = await fetch('/api/trigger-flow', { method: 'POST' });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || `HTTP error! status: ${response.status}`);
            }
            setLogOutput(prev => prev + `SUCCESS: ${result.message}\n`);
        } catch (e: unknown) {
            const message = e instanceof Error ? e.message : 'An unknown error occurred.';
            setLogOutput(prev => prev + `ERROR: ${message}\n`);
        } finally {
            setIsTriggeringFlow(false);
        }
    };

    const handleSendEmail = async (scenarioId: string) => {
        if (!scenarioId) {
            setLogOutput(prev => prev + '\nPlease provide a scenario ID.\n');
            return;
        }
        setIsSendingEmail(true);
        const scenario = emailConfig.find(s => s.id === scenarioId);
        setLogOutput(
            prev => prev + `\nSending email for scenario: "${scenario?.description}"...\n`,
        );
        try {
            const response = await fetch('/api/send-email', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ scenarioId }),
            });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || `HTTP error! status: ${response.status}`);
            }
            setLogOutput(prev => prev + `SUCCESS: ${result.message}\n`);
        } catch (e: unknown) {
            const message = e instanceof Error ? e.message : 'An unknown error occurred.';
            setLogOutput(prev => prev + `ERROR: ${message}\n`);
        } finally {
            setIsSendingEmail(false);
        }
    };

    const handleSendCategoryNotification = async (categoryId: string) => {
        setIsSendingCategoryNotification(true);
        setLogOutput(
            prev =>
                prev + `\nSending category manager notification for category ${categoryId}...\n`,
        );

        try {
            const response = await fetch('/api/send-email', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    scenarioId: 'category_manager_notification',
                    categoryId: parseInt(categoryId, 10),
                }),
            });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || `HTTP error! status: ${response.status}`);
            }
            setLogOutput(prev => prev + `SUCCESS: ${result.message}\n`);
        } catch (e: unknown) {
            const message = e instanceof Error ? e.message : 'An unknown error occurred.';
            setLogOutput(prev => prev + `ERROR: ${message}\n`);
        }

        setIsSendingCategoryNotification(false);
    };

    const handleSendKamNotification = async (categoryId: string) => {
        setIsSendingKamNotification(true);
        setLogOutput(prev => prev + `\nSending KAM notification for category ${categoryId}...\n`);

        try {
            const response = await fetch('/api/send-email', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    scenarioId: 'kam_notification',
                    categoryId: parseInt(categoryId, 10),
                }),
            });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || `HTTP error! status: ${response.status}`);
            }
            setLogOutput(prev => prev + `SUCCESS: ${result.message}\n`);
        } catch (e: unknown) {
            const message = e instanceof Error ? e.message : 'An unknown error occurred.';
            setLogOutput(prev => prev + `ERROR: ${message}\n`);
        }

        setIsSendingKamNotification(false);
    };

    const handleSendListingNotification = async (categoryId: string) => {
        setIsSendingListingNotification(true);
        setLogOutput(prev => prev + `\nSending Listing notification for category ${categoryId}...\n`);

        try {
            const response = await fetch('/api/send-email', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    scenarioId: 'listing_notification',
                    categoryId: parseInt(categoryId, 10),
                }),
            });
            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.error || `HTTP error! status: ${response.status}`);
            }
            setLogOutput(prev => prev + `SUCCESS: ${result.message}\n`);
        } catch (e: unknown) {
            const message = e instanceof Error ? e.message : 'An unknown error occurred.';
            setLogOutput(prev => prev + `ERROR: ${message}\n`);
        }

        setIsSendingListingNotification(false);
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">Update Keycloak data</h1>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FileUpload onFileLoaded={handleFileLoaded} />
            </div>

            {error && <div className="text-red-500 mt-4">{error}</div>}

            <div className="mt-8">
                <JsonOutput data={keycloakJson} />
            </div>

            <hr className="my-8" />

            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-4">KeyCloak & Database Operations</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h3 className="font-semibold text-blue-800 mb-2">KeyCloak Operations</h3>
                        <div className="space-y-2">
                            <button
                                onClick={() => handleStreamedOperation('/api/export-keycloak-sheet', 'Export')}
                                disabled={isExporting || isImporting}
                                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                            >
                                {isExporting ? 'Exporting...' : 'Export from KeyCloak'}
                            </button>
                            <button
                                onClick={() => handleStreamedOperation('/api/import-keycloak-sheet', 'Import')}
                                disabled={isExporting || isImporting}
                                className="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                            >
                                {isImporting ? 'Importing...' : 'Import to KeyCloak'}
                            </button>
                        </div>
                    </div>

                    <div className="bg-teal-50 border border-teal-200 rounded-lg p-4">
                        <h3 className="font-semibold text-teal-800 mb-2">Database Operations</h3>
                        <div className="space-y-2">
                            <button
                                onClick={() => handleStreamedOperation('/api/export-sheet', 'ExportToGoogleSheet')}
                                disabled={isExporting || isImporting || isExportingToGoogleSheet || isCheckingSheet}
                                className="w-full bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                            >
                                {isExportingToGoogleSheet ? 'Exporting...' : 'Export DB to Sheet'}
                            </button>
                            <button
                                onClick={handleCheckSheet}
                                disabled={isCheckingSheet || isExportingToGoogleSheet}
                                className="w-full bg-purple-500 hover:bg-purple-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                            >
                                {isCheckingSheet ? 'Checking...' : 'Check Sheet & Trigger Flow'}
                            </button>
                        </div>
                    </div>
                </div>

                {logOutput && (
                    <div className="mt-4 p-4 bg-gray-100 border border-gray-300 rounded-lg max-h-96 overflow-y-auto">
                        <h3 className="text-lg font-medium mb-2">Operation Log:</h3>
                        <pre className="text-sm whitespace-pre-wrap">{logOutput}</pre>
                    </div>
                )}
            </div>

            <hr className="my-8" />

            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-4">Excel & Power Automate Operations</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                        <h3 className="font-semibold text-orange-800 mb-2">Excel Generation</h3>
                        <div className="flex items-center space-x-2 mb-2">
                            <input
                                type="text"
                                value={excelFolderId}
                                onChange={e => setExcelFolderId(e.target.value)}
                                placeholder="Enter Folder ID"
                                className="flex-1 border border-gray-300 rounded px-3 py-2 text-sm"
                            />
                        </div>
                        <button
                            onClick={handleGenerateExcel}
                            disabled={isGeneratingExcel || !excelFolderId}
                            className="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                        >
                            {isGeneratingExcel ? 'Generating...' : 'Generate & Send Excel'}
                        </button>
                    </div>

                    <div className="bg-cyan-50 border border-cyan-200 rounded-lg p-4">
                        <h3 className="font-semibold text-cyan-800 mb-2">Power Automate</h3>
                        <button
                            onClick={handleTriggerFlow}
                            disabled={isTriggeringFlow}
                            className="w-full bg-cyan-500 hover:bg-cyan-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                        >
                            {isTriggeringFlow ? 'Triggering...' : 'Trigger Flow with Excel'}
                        </button>
                    </div>
                </div>
            </div>

            <hr className="my-8" />

            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-4">Direct Email Operations</h2>
                
                <div className="bg-emerald-50 border border-emerald-200 rounded-lg p-4">
                    <h3 className="font-semibold text-emerald-800 mb-3">Send Emails</h3>
                    <div className="flex flex-wrap gap-2">
                        <div className="flex items-center space-x-2 min-w-64">
                            <select
                                value={selectedScenarioId}
                                onChange={e => setSelectedScenarioId(e.target.value)}
                                className="flex-1 border border-gray-300 rounded px-3 py-2 text-sm"
                            >
                                {emailConfig.map(scenario => (
                                    <option key={scenario.id} value={scenario.id}>
                                        {scenario.description}
                                    </option>
                                ))}
                            </select>
                            <button
                                onClick={() => handleSendEmail(selectedScenarioId)}
                                disabled={isSendingEmail || !selectedScenarioId}
                                className="bg-emerald-500 hover:bg-emerald-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                            >
                                {isSendingEmail ? 'Sending...' : 'Send'}
                            </button>
                        </div>
                        <button
                            onClick={() => handleSendEmail('icpu_check')}
                            disabled={isSendingEmail}
                            className="bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                        >
                            {isSendingEmail ? 'Sending...' : 'ICPU Check'}
                        </button>
                        <button
                            onClick={() => handleSendEmail('translation_request')}
                            disabled={isSendingEmail}
                            className="bg-indigo-500 hover:bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50"
                        >
                            {isSendingEmail ? 'Sending...' : 'На перевод'}
                        </button>
                    </div>
                </div>
            </div>

            <hr className="my-8" />

            <div className="mt-8">
                <h2 className="text-xl font-semibold mb-6">Уведомления по категориям</h2>
                
                {/* Единый выбор категории */}
                <div className="bg-blue-50 p-4 rounded-lg mb-6">
                    <h3 className="text-lg font-medium mb-3">Выбор категории</h3>
                    <select
                        value={selectedCategoryId}
                        onChange={e => setSelectedCategoryId(e.target.value)}
                        className="border border-gray-300 rounded-lg px-4 py-2 bg-white min-w-48"
                        disabled={isSendingCategoryNotification || isSendingKamNotification || isSendingListingNotification}
                    >
                        <option value="2">Категория 2</option>
                        <option value="6">Категория 6</option>
                        <option value="11">Категория 11</option>
                        <option value="12">Категория 12</option>
                        <option value="15">Категория 15</option>
                        <option value="16">Категория 16</option>
                        <option value="20">Категория 20</option>
                        <option value="21">Категория 21</option>
                        <option value="28">Категория 28</option>
                    </select>
                </div>

                {/* Кнопки уведомлений */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
                        <h4 className="font-semibold text-amber-800 mb-2">Category Manager</h4>
                        <p className="text-sm text-amber-600 mb-3">Статус 2 - требует проверки</p>
                        <button
                            onClick={() => handleSendCategoryNotification(selectedCategoryId)}
                            disabled={isSendingCategoryNotification}
                            className="w-full bg-amber-500 hover:bg-amber-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isSendingCategoryNotification ? 'Отправка...' : 'Отправить КМ'}
                        </button>
                    </div>

                    <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                        <h4 className="font-semibold text-red-800 mb-2">KAM</h4>
                        <p className="text-sm text-red-600 mb-3">Статус 5 - требует доработки</p>
                        <button
                            onClick={() => handleSendKamNotification(selectedCategoryId)}
                            disabled={isSendingKamNotification}
                            className="w-full bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isSendingKamNotification ? 'Отправка...' : 'Отправить КАМ'}
                        </button>
                    </div>

                    <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                        <h4 className="font-semibold text-green-800 mb-2">Листинг</h4>
                        <p className="text-sm text-green-600 mb-3">Статус 7 - готово к листингу</p>
                        <button
                            onClick={() => handleSendListingNotification(selectedCategoryId)}
                            disabled={isSendingListingNotification}
                            className="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isSendingListingNotification ? 'Отправка...' : 'Отправить Листинг'}
                        </button>
                    </div>
                </div>

                {/* Кнопки отладки в компактном виде */}
                <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Отладка</h4>
                    <div className="flex flex-wrap gap-2">
                        <button
                            onClick={async () => {
                                setLogOutput(prev => prev + '\nChecking available Google Sheets...\n');
                                try {
                                    const response = await fetch('/api/debug-sheets');
                                    const result = await response.json();
                                    if (response.ok) {
                                        setLogOutput(prev => prev + `Available sheets: ${result.availableSheets.join(', ')}\n`);
                                    } else {
                                        setLogOutput(prev => prev + `ERROR: ${result.error}\n`);
                                    }
                                } catch (error) {
                                    setLogOutput(prev => prev + `ERROR: ${error instanceof Error ? error.message : 'Unknown error'}\n`);
                                }
                            }}
                            className="bg-slate-500 hover:bg-slate-600 text-white text-sm py-1 px-3 rounded"
                        >
                            Листы
                        </button>
                        <button
                            onClick={async () => {
                                setLogOutput(prev => prev + '\nChecking sheet data...\n');
                                try {
                                    const response = await fetch('/api/debug-sheet-data');
                                    const result = await response.json();
                                    if (response.ok) {
                                        setLogOutput(prev => prev + `Total rows: ${result.totalRows}, Status 2 count: ${result.summary.status2Count}\n`);
                                    } else {
                                        setLogOutput(prev => prev + `ERROR: ${result.error}\n`);
                                    }
                                } catch (error) {
                                    setLogOutput(prev => prev + `ERROR: ${error instanceof Error ? error.message : 'Unknown error'}\n`);
                                }
                            }}
                            className="bg-gray-500 hover:bg-gray-600 text-white text-sm py-1 px-3 rounded"
                        >
                            Данные
                        </button>
                        <button
                            onClick={async () => {
                                setLogOutput(prev => prev + '\nChecking KM email logs...\n');
                                try {
                                    const response = await fetch('/api/email-logs?scenario=category_manager_notification');
                                    const result = await response.json();
                                    if (response.ok) {
                                        setLogOutput(prev => prev + `КМ emails: ${result.count}\n`);
                                    } else {
                                        setLogOutput(prev => prev + `ERROR: ${result.error}\n`);
                                    }
                                } catch (error) {
                                    setLogOutput(prev => prev + `ERROR: ${error instanceof Error ? error.message : 'Unknown error'}\n`);
                                }
                            }}
                            className="bg-amber-500 hover:bg-amber-600 text-white text-sm py-1 px-3 rounded"
                        >
                            История КМ
                        </button>
                        <button
                            onClick={async () => {
                                setLogOutput(prev => prev + '\nChecking KAM email logs...\n');
                                try {
                                    const response = await fetch('/api/email-logs?scenario=kam_notification');
                                    const result = await response.json();
                                    if (response.ok) {
                                        setLogOutput(prev => prev + `КАМ emails: ${result.count}\n`);
                                    } else {
                                        setLogOutput(prev => prev + `ERROR: ${result.error}\n`);
                                    }
                                } catch (error) {
                                    setLogOutput(prev => prev + `ERROR: ${error instanceof Error ? error.message : 'Unknown error'}\n`);
                                }
                            }}
                            className="bg-red-500 hover:bg-red-600 text-white text-sm py-1 px-3 rounded"
                        >
                            История КАМ
                        </button>
                        <button
                            onClick={async () => {
                                setLogOutput(prev => prev + '\nChecking Listing email logs...\n');
                                try {
                                    const response = await fetch('/api/email-logs?scenario=listing_notification');
                                    const result = await response.json();
                                    if (response.ok) {
                                        setLogOutput(prev => prev + `Листинг emails: ${result.count}\n`);
                                    } else {
                                        setLogOutput(prev => prev + `ERROR: ${result.error}\n`);
                                    }
                                } catch (error) {
                                    setLogOutput(prev => prev + `ERROR: ${error instanceof Error ? error.message : 'Unknown error'}\n`);
                                }
                            }}
                            className="bg-green-500 hover:bg-green-600 text-white text-sm py-1 px-3 rounded"
                        >
                            История Листинг
                        </button>
                </div>
            </div>

        </div>
    );
};

export default Home;
